const express = require('express');
const bodyParser = require('body-parser');
const sql = require('mssql');
const cors = require('cors');
const bcrypt = require('bcrypt');

const dbConfig = {
    user: 'sa',
    password: 'ok',
    server: 'DESKTOP-8ECKFC8',
    database: 'databasee',
    options: {
        encrypt: true,
        trustServerCertificate: true,
    },
};

const app = express();
const port = 3000;
app.use(cors());
app.use(bodyParser.json());

// API ƒëƒÉng k√Ω ng∆∞·ªùi d√πng
app.post('/register', async (req, res) => {
    const { username, email, password } = req.body;

    if (!username || !email || !password) {
        return res.status(400).json({ error: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin." });
    }

    try {
        let pool = await sql.connect(dbConfig);
        let result = await pool.request()
            .input('email', sql.NVarChar, email)
            .query('SELECT * FROM Users WHERE email = @email');

        if (result.recordset.length > 0) {
            return res.status(400).json({ error: 'Email ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω.' });
        }

        const hashedPassword = await bcrypt.hash(password, 10);
        await pool.request()
            .input('username', sql.NVarChar, username)
            .input('email', sql.NVarChar, email)
            .input('password', sql.NVarChar, hashedPassword)
            .input('role', sql.NVarChar, 'user')
            .query("INSERT INTO Users (username, email, password, role) VALUES (@username, @email, @password, @role)");

        res.json({ message: 'ƒêƒÉng k√Ω th√†nh c√¥ng!' });
    } catch (err) {
        console.error("L·ªói ƒëƒÉng k√Ω:", err);
        res.status(500).json({ error: 'ƒê√£ x·∫£y ra l·ªói khi ƒëƒÉng k√Ω.' });
    }
});

// API ƒëƒÉng nh·∫≠p ng∆∞·ªùi d√πng
app.post('/login', async (req, res) => {
    const { email, password } = req.body;

    if (!email || !password) {
        return res.status(400).json({ error: "Vui l√≤ng nh·∫≠p email v√† m·∫≠t kh·∫©u." });
    }

    try {
        let pool = await sql.connect(dbConfig);
        let result = await pool.request()
            .input('email', sql.NVarChar, email)
            .query('SELECT * FROM Users WHERE email = @email');

        if (result.recordset.length === 0) {
            return res.status(400).json({ error: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng.' });
        }

        const user = result.recordset[0];
        console.log("User data:", user); // Debug th√¥ng tin ng∆∞·ªùi d√πng

        if (!user.password) {
            return res.status(400).json({ error: 'M·∫≠t kh·∫©u kh√¥ng t·ªìn t·∫°i.' });
        }

        const isPasswordValid = await bcrypt.compare(password, user.password);
        
        if (!isPasswordValid) {
            return res.status(400).json({ error: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng.' });
        }

        res.json({ message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng!', userId: user.id, role: user.role || 'user' });
        console.log("üìå [DEBUG] K·∫øt qu·∫£ ƒëƒÉng nh·∫≠p:", { userId: user.id, role: user.role });

    } catch (err) {
        console.error("L·ªói ƒëƒÉng nh·∫≠p:", err);
        res.status(500).json({ error: 'ƒê√£ x·∫£y ra l·ªói khi ƒëƒÉng nh·∫≠p.' });
    }
});

// API th√™m s·∫£n ph·∫©m
app.post('/products/add', async (req, res) => {
    const { name, price, image } = req.body;

    if (!name || !price || !image) {
        return res.status(400).json({ error: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin s·∫£n ph·∫©m." });
    }

    try {
        let pool = await sql.connect(dbConfig);
        await pool.request()
            .input('name', sql.NVarChar, name)
            .input('price', sql.Float, price)
            .input('image', sql.NVarChar, image)
            .query("INSERT INTO Products (Name, Price, Image) VALUES (@name, @price, @image)");

        res.json({ message: 'Th√™m s·∫£n ph·∫©m th√†nh c√¥ng!' });
    } catch (err) {
        console.error("L·ªói th√™m s·∫£n ph·∫©m:", err);
        res.status(500).json({ error: 'ƒê√£ x·∫£y ra l·ªói khi th√™m s·∫£n ph·∫©m.' });
    }
});

// API c·∫≠p nh·∫≠t s·∫£n ph·∫©m
app.put('/products/update', async (req, res) => {
    const { id, name, price, image } = req.body;

    if (!id || !name || !price || !image) {
        return res.status(400).json({ error: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin s·∫£n ph·∫©m." });
    }

    try {
        let pool = await sql.connect(dbConfig);
        await pool.request()
            .input('id', sql.Int, id)
            .input('name', sql.NVarChar, name)
            .input('price', sql.Float, price)
            .input('image', sql.NVarChar, image)
            .query("UPDATE Products SET Name = @name, Price = @price, Image = @image WHERE id = @id");

        res.json({ message: 'C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!' });
    } catch (err) {
        console.error("L·ªói c·∫≠p nh·∫≠t s·∫£n ph·∫©m:", err);
        res.status(500).json({ error: 'ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m.' });
    }
});

app.get('/products', async (req, res) => {
    try {
        let pool = await sql.connect(dbConfig);
        let result = await pool.request()
            .query("SELECT id, Name AS name, ISNULL(CAST(Price AS FLOAT), 0) AS price, Image AS image FROM Products");

        console.log("üìå [DEBUG] Danh s√°ch s·∫£n ph·∫©m t·ª´ database:", result.recordset);
        res.json(result.recordset);
    } catch (err) {
        console.error("‚ùå [DEBUG] L·ªói l·∫•y danh s√°ch s·∫£n ph·∫©m:", err);
        res.status(500).json({ error: 'L·ªói server!' });
    }
});




// API t√¨m ki·∫øm s·∫£n ph·∫©m
app.get('/products/search', async (req, res) => {
    const { query } = req.query;

    if (!query) {
        return res.status(400).json({ error: "Vui l√≤ng nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm." });
    }

    try {
        let pool = await sql.connect(dbConfig);
        let result = await pool.request()
            .input('query', sql.NVarChar, `%${query}%`)
            .query(`
                SELECT id, Name AS name, Price AS price, Image AS image
                FROM Products
                WHERE Name LIKE @query
            `);

        res.json(result.recordset);
    } catch (err) {
        console.error("L·ªói khi t√¨m ki·∫øm s·∫£n ph·∫©m:", err);
        res.status(500).json({ error: 'ƒê√£ x·∫£y ra l·ªói khi t√¨m ki·∫øm s·∫£n ph·∫©m.' });
    }
});

// API th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
app.post('/cart/add', async (req, res) => {
    const { userId, productId, quantity } = req.body;
    try {
        let pool = await sql.connect(dbConfig);
        await pool.request()
            .input('userId', sql.Int, userId)
            .input('productId', sql.Int, productId)
            .input('quantity', sql.Int, quantity)
            .query(`
                MERGE INTO Cart AS target
                USING (SELECT @userId AS UserId, @productId AS ProductId) AS source
                ON target.UserId = source.UserId AND target.ProductId = source.ProductId
                WHEN MATCHED THEN
                    UPDATE SET target.Quantity = target.Quantity + source.Quantity
                WHEN NOT MATCHED THEN
                    INSERT (UserId, ProductId, Quantity) VALUES (source.UserId, source.ProductId, source.Quantity);
            `);
        res.json({ message: 'Th√™m v√†o gi·ªè h√†ng th√†nh c√¥ng!' });
    } catch (err) {
        console.error("L·ªói th√™m v√†o gi·ªè h√†ng:", err);
        res.status(500).json({ error: 'L·ªói server!' });
    }
});
// üìå API c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
app.put('/cart/update', async (req, res) => {
    const { userId, productId, quantity } = req.body;

    if (!userId || !productId || quantity < 1) {
        return res.status(400).json({ error: "Th√¥ng tin kh√¥ng h·ª£p l·ªá." });
    }

    try {
        let pool = await sql.connect(dbConfig);
        await pool.request()
            .input('userId', sql.Int, userId)
            .input('productId', sql.Int, productId)
            .input('quantity', sql.Int, quantity)
            .query("UPDATE Cart SET Quantity = @quantity WHERE UserId = @userId AND ProductId = @productId");

        res.json({ message: 'C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m th√†nh c√¥ng!' });
    } catch (err) {
        console.error("L·ªói c·∫≠p nh·∫≠t gi·ªè h√†ng:", err);
        res.status(500).json({ error: 'L·ªói server!' });
    }
});
// üìå API l·∫•y gi·ªè h√†ng
app.get("/cart/:userId", async (req, res) => {
    try {
        let pool = await sql.connect(config);
        let result = await pool
            .request()
            .input("userId", sql.Int, req.params.userId)
            .query("SELECT * FROM Cart WHERE userId = @userId");

        res.json(result.recordset.length ? result.recordset : []);
    } catch (err) {
        res.status(500).send("L·ªói server: " + err.message);
    }
});

// API x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
app.delete("/cart/:userId/:productId", async (req, res) => {
    try {
        let pool = await sql.connect(config);
        await pool
            .request()
            .input("userId", sql.Int, req.params.userId)
            .input("productId", sql.Int, req.params.productId)
            .query("DELETE FROM Cart WHERE userId = @userId AND productId = @productId");

        res.send("ƒê√£ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng");
    } catch (err) {
        res.status(500).send("L·ªói server: " + err.message);
    }
});
app.post('/cart/remove', async (req, res) => {
    const { userId, productId } = req.body;

    if (!userId || !productId) {
        return res.status(400).json({ error: "Thi·∫øu userId ho·∫∑c productId." });
    }

    try {
        let pool = await sql.connect(dbConfig);
        await pool.request()
            .input('userId', sql.Int, userId)
            .input('productId', sql.Int, productId)
            .query(`
                DELETE FROM Cart WHERE UserId = @userId AND ProductId = @productId
            `);

        console.log(`üìå [DEBUG] X√≥a s·∫£n ph·∫©m ${productId} kh·ªèi gi·ªè h√†ng user ${userId}`);
        res.json({ message: "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi gi·ªè h√†ng" });
    } catch (err) {
        console.error("‚ùå L·ªói khi x√≥a s·∫£n ph·∫©m:", err);
        res.status(500).json({ error: "L·ªói server!" });
    }
});


// K·∫øt n·ªëi SQL Server
sql.connect(dbConfig)
    .then(() => console.log("K·∫øt n·ªëi SQL Server th√†nh c√¥ng!"))
    .catch(err => console.error("L·ªói k·∫øt n·ªëi:", err));

app.listen(port, () => console.log(`Server ƒëang ch·∫°y t·∫°i http://localhost:${port}`));